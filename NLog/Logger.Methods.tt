<#@ template language="C#" 
#><#@ import namespace="System" 
#><#@ import namespace="System.Collections.Generic" 
#><#@ import namespace="System.IO" 
#>using System;
using System.ComponentModel;
using NLog.Internal;

namespace NLog
{
	/// <summary>
	/// Provides logging interface and utility functions.
	/// </summary>
	public partial class Logger
	{
		#region Log() overloads
		/// <overloads>
		/// Writes the diagnostic message at the specified level using the specified format provider and format parameters.
		/// </overloads>
		/// <summary>
		/// Writes the diagnostic message at the specified level.
		/// </summary>
		/// <typeparam name="T">Type of the value.</typeparam>
		/// <param name="level">The log level.</param>
		/// <param name="value">The value to be written.</param>
		public void Log<T>(LogLevel level, T value)
		{
			if(IsEnabled(level))
				WriteToTargets(level, null, value);
		}

		/// <summary>
		/// Writes the diagnostic message at the specified level.
		/// </summary>
		/// <typeparam name="T">Type of the value.</typeparam>
		/// <param name="level">The log level.</param>
		/// <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
		/// <param name="value">The value to be written.</param>
		public void Log<T>(LogLevel level, IFormatProvider formatProvider, T value)
		{
			if(IsEnabled(level))
				WriteToTargets(level, formatProvider, value);
		}

		/// <summary>
		/// Writes the diagnostic message at the specified level.
		/// </summary>
		/// <param name="level">The log level.</param>
		/// <param name="messageFunc">A function returning message to be written. Function is not evaluated if logging is not enabled.</param>
		public void Log(LogLevel level, Func<string> messageFunc)
		{
			if(IsEnabled(level))
			{
				if(messageFunc == null)
					throw new ArgumentNullException("messageFunc");
					
				WriteToTargets(level, null, messageFunc());
			}
		}

		/// <summary>
		/// Writes the diagnostic message and exception at the specified level.
		/// </summary>
		/// <param name="level">The log level.</param>
		/// <param name="message">A <see langword="string" /> to be written.</param>
		/// <param name="exception">An exception to be logged.</param>
		public void LogException(LogLevel level, [Localizable(false)] string message, Exception exception)
		{
			if(IsEnabled(level))
				WriteToTargets(level, message, exception);
		}

		/// <summary>
		/// Writes the diagnostic message at the specified level using the specified parameters and formatting them with the supplied format provider.
		/// </summary>
		/// <param name="level">The log level.</param>
		/// <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
		/// <param name="message">A <see langword="string" /> containing format items.</param>
		/// <param name="args">Arguments to format.</param>
		public void Log(LogLevel level, IFormatProvider formatProvider, [Localizable(false)] string message, params object[] args)
		{
			if(IsEnabled(level))
				WriteToTargets(level, formatProvider, message, args); 
		}

		/// <summary>
		/// Writes the diagnostic message at the specified level.
		/// </summary>
		/// <param name="level">The log level.</param>
		/// <param name="message">Log message.</param>
		public void Log(LogLevel level, [Localizable(false)] string message) 
		{
			if(IsEnabled(level))
				WriteToTargets(level, null, message);
		}

		/// <summary>
		/// Writes the diagnostic message at the specified level using the specified parameters.
		/// </summary>
		/// <param name="level">The log level.</param>
		/// <param name="message">A <see langword="string" /> containing format items.</param>
		/// <param name="args">Arguments to format.</param>
		public void Log(LogLevel level, [Localizable(false)] string message, params object[] args) 
		{
			if(IsEnabled(level))
				WriteToTargets(level, null, message, args);
		}
<# for(int i = 1; i<=4; i++) {
  List<string> TArg = new List<string>();
  List<string> Arg = new List<string>();
  List<string> TArgArg = new List<string>();

  for(int k = 1; k<=i; k++)
  {
    TArg.Add("TArg" + k.ToString());
    Arg.Add("arg" + k.ToString());
    TArgArg.Add(string.Format("TArg{0} arg{0}", k));
  }
#>

		/// <summary>
		/// Writes the diagnostic message at the specified level using the specified parameter and formatting it with the supplied format provider.
		/// </summary>
<#foreach(string targ in TArg) {#>		/// <typeparam name="<#=targ#>">The type of the argument.</typeparam>
<#}#>		/// <param name="level">The log level.</param>
		/// <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
		/// <param name="message">A <see langword="string" /> containing one format item.</param>
<#foreach(string arg in Arg) {#>		/// <param name="<#=arg#>">The argument to format.</param>
<#}#>		public void Log<<#=string.Join(", ", TArg)#>>(LogLevel level, IFormatProvider formatProvider, [Localizable(false)] string message,
			<#=string.Join(", ", TArgArg)#>)
		{
			if(IsEnabled(level))
				WriteToTargets(level, formatProvider, message, new object[] { <#=string.Join(", ", Arg)#> }); 
		}

		/// <summary>
		/// Writes the diagnostic message at the specified level using the specified parameter.
		/// </summary>
<#foreach(string targ in TArg) {#>		/// <typeparam name="<#=targ#>">The type of the argument.</typeparam>
<#}#>		/// <param name="level">The log level.</param>
		/// <param name="message">A <see langword="string" /> containing one format item.</param>
<#foreach(string arg in Arg) {#>		/// <param name="<#=arg#>">The argument to format.</param>
<#}#>		public void Log<<#=string.Join(", ", TArg)#>>(LogLevel level, [Localizable(false)] string message,
			<#=string.Join(", ", TArgArg)#>)
		{
			if(IsEnabled(level))
				WriteToTargets(level, null, message, new object[] { <#=string.Join(", ", Arg)#> });
		}

		/// <summary>
		/// Writes the diagnostic message at the specified level.
		/// </summary>
		/// <param name="level">The log level.</param>
		/// <param name="messageFunc">A function returning message to be written. Function is not evaluated if logging is not enabled.</param>
<#foreach(string arg in Arg) {#>		/// <param name="<#=arg#>">The argument to function.</param>
<#}#>		public void Log<<#=string.Join(", ", TArg)#>>(LogLevel level, Func<<#=string.Join(", ", TArg)#>, string> messageFunc,
			<#=string.Join(", ", TArgArg)#>)
		{
			if(IsEnabled(level))
			{
				if(messageFunc == null)
					throw new ArgumentNullException("messageFunc");
					
				WriteToTargets(level, null, messageFunc(<#=string.Join(", ", Arg)#>));
			}
		}
<# } #>
		#endregion
<# foreach(string level in new string[]{ "Trace", "Debug", "Info", "Warn", "Error", "Fatal"}) { #>

		#region <#=level#>() overloads
		
		private volatile bool _is<#=level#>Enabled;
		
		/// <summary>
		/// Gets a value indicating whether logging is enabled for the <c><#=level#></c> level.
		/// </summary>
		/// <returns>A value of <see langword="true" /> if logging is enabled for the <c>Trace</c> level, otherwise it returns <see langword="false" />.</returns>
		public bool Is<#=level#>Enabled
		{
			get
			{
				return _is<#=level#>Enabled;
			}
		}
		
		/// <overloads>
		/// Writes the diagnostic message at the <c><#=level#></c> level using the specified format provider and format parameters.
		/// </overloads>
		/// <summary>
		/// Writes the diagnostic message at the <c><#=level#></c> level.
		/// </summary>
		/// <typeparam name="T">Type of the value.</typeparam>
		/// <param name="value">The value to be written.</param>
		public void <#=level#><T>(T value)
		{
			if(_is<#=level#>Enabled)
				WriteToTargets(LogLevel.<#=level#>, null, value);
		}

		/// <summary>
		/// Writes the diagnostic message at the <c><#=level#></c> level.
		/// </summary>
		/// <typeparam name="T">Type of the value.</typeparam>
		/// <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
		/// <param name="value">The value to be written.</param>
		public void <#=level#><T>(IFormatProvider formatProvider, T value)
		{
			if(_is<#=level#>Enabled)
				WriteToTargets(LogLevel.<#=level#>, formatProvider, value);
		}

		/// <summary>
		/// Writes the diagnostic message at the <c><#=level#></c> level.
		/// </summary>
		/// <param name="messageFunc">A function returning message to be written. Function is not evaluated if logging is not enabled.</param>
		public void <#=level#>(Func<string> messageFunc)
		{
			if(_is<#=level#>Enabled)
			{
				if(messageFunc == null)
					throw new ArgumentNullException("messageFunc");

				WriteToTargets(LogLevel.<#=level#>, null, messageFunc());
			}
		}

		/// <summary>
		/// Writes the diagnostic message and exception at the <c><#=level#></c> level.
		/// </summary>
		/// <param name="message">A <see langword="string" /> to be written.</param>
		/// <param name="exception">An exception to be logged.</param>
		public void <#=level#>Exception([Localizable(false)] string message, Exception exception)
		{
			if(_is<#=level#>Enabled)
				WriteToTargets(LogLevel.<#=level#>, message, exception);
		}

		/// <summary>
		/// Writes the diagnostic message at the <c><#=level#></c> level using the specified parameters and formatting them with the supplied format provider.
		/// </summary>
		/// <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
		/// <param name="message">A <see langword="string" /> containing format items.</param>
		/// <param name="args">Arguments to format.</param>
		public void <#=level#>(IFormatProvider formatProvider, [Localizable(false)] string message, params object[] args)
		{
			if(_is<#=level#>Enabled)
				WriteToTargets(LogLevel.<#=level#>, formatProvider, message, args); 
		}

		/// <summary>
		/// Writes the diagnostic message at the <c><#=level#></c> level.
		/// </summary>
		/// <param name="message">Log message.</param>
		public void <#=level#>([Localizable(false)] string message) 
		{
			if(_is<#=level#>Enabled)
				WriteToTargets(LogLevel.<#=level#>, null, message);
		}

		/// <summary>
		/// Writes the diagnostic message at the <c><#=level#></c> level using the specified parameters.
		/// </summary>
		/// <param name="message">A <see langword="string" /> containing format items.</param>
		/// <param name="args">Arguments to format.</param>
		public void <#=level#>([Localizable(false)] string message, params object[] args) 
		{
			if(_is<#=level#>Enabled)
				WriteToTargets(LogLevel.<#=level#>, null, message, args);
		}

<# for(int i = 1; i<=4; i++) {
  List<string> TArg = new List<string>();
  List<string> Arg = new List<string>();
  List<string> TArgArg = new List<string>();

  for(int k = 1; k<=i; k++)
  {
    TArg.Add("TArg" + k.ToString());
    Arg.Add("arg" + k.ToString());
    TArgArg.Add(string.Format("TArg{0} arg{0}", k));
  }
#>
		/// <summary>
		/// Writes the diagnostic message at the <c><#=level#></c> level using the specified parameter and formatting it with the supplied format provider.
		/// </summary>
<#foreach(string targ in TArg) {#>		/// <typeparam name="<#=targ#>">The type of the argument.</typeparam>
<#}#>		/// <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
		/// <param name="message">A <see langword="string" /> containing one format item.</param>
<#foreach(string arg in Arg) {#>		/// <param name="<#=arg#>">The argument to format.</param>
<#}#>		public void <#=level#><<#=string.Join(", ", TArg)#>>(IFormatProvider formatProvider, [Localizable(false)] string message,
			<#=string.Join(", ", TArgArg)#>)
		{
			if(_is<#=level#>Enabled)
				WriteToTargets(LogLevel.<#=level#>, formatProvider, message, new object[] { <#=string.Join(", ", Arg)#> }); 
		}

		/// <summary>
		/// Writes the diagnostic message at the <c><#=level#></c> level using the specified parameter.
		/// </summary>
<#foreach(string targ in TArg) {#>		/// <typeparam name="<#=targ#>">The type of the argument.</typeparam>
<#}#>		/// <param name="message">A <see langword="string" /> containing one format item.</param>
<#foreach(string arg in Arg) {#>		/// <param name="<#=arg#>">The argument to format.</param>
<#}#>		public void <#=level#><<#=string.Join(", ", TArg)#>>([Localizable(false)] string message,
			<#=string.Join(", ", TArgArg)#>)
		{
			if(_is<#=level#>Enabled)
				WriteToTargets(LogLevel.<#=level#>, null, message, new object[] { <#=string.Join(", ", Arg)#> });
		}
		
		/// <summary>
		/// Writes the diagnostic message at the <c><#=level#></c> level.
		/// </summary>
		/// <param name="messageFunc">A function returning message to be written. Function is not evaluated if logging is not enabled.</param>
<#foreach(string arg in Arg) {#>		/// <param name="<#=arg#>">The argument to function.</param>
<#}#>		public void <#=level#><<#=string.Join(", ", TArg)#>>(Func<<#=string.Join(", ", TArg)#>, string> messageFunc,
			<#=string.Join(", ", TArgArg)#>)
		{
			if(_is<#=level#>Enabled)
			{
				if(messageFunc == null)
					throw new ArgumentNullException("messageFunc");

				WriteToTargets(LogLevel.<#=level#>, null, messageFunc(<#=string.Join(", ", Arg)#>));
			}
		}
<# } #>
		#endregion
<#}#>
	}
}
